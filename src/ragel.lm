rl ident
	/( alpha | '_' ) ( alpha | digit | '_' )*/

rl number
	/ digit+ /

rl hex_number
	/ '0x' [0-9a-fA-F]+ /

rl NL / '\n' /

rl c_comment 
	/ '/*' ( any | NL )* :>> '*/' /

rl cpp_comment
	/ '//' [^\n]* NL /

rl s_literal
	/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

rl d_literal
	/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

namespace c_inline
	lex 
		token ident /ident/
		token number /digit+/
		token hex_number /'0x' [0-9a-fA-F]+/

		token comment
			/c_comment | cpp_comment/

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		literal '{', '}'

		token c_any / any /
	end

	def item
		[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	['{' item* '}']
	|	[c_any]
end

namespace ragel
	lex
		ignore /[\t\n ]+/
		ignore /'#' any* :> '\n'/

		literal '^', '|', '-', ',', ':', '!', '?', '.'
		literal '(', ')', '{', '}', '*', '&', '+'

		literal '--', ':>', ':>>', '<:', '->', '**'

		literal '|*', '*|', '=>' 

		literal '@', '>', '<', '%', '$'
		literal 'from', 'to', 'eof', 'lerr', 'err'
		literal 'when', 'inwhen', 'outwhen', '>?', '$?', '%?' 

		literal ':=', '=', ';', '..'

		literal '>~', '$~', '%~', '<~', '@~', '<>~' 
		literal '>*', '$*', '%*', '<*', '@*', '<>*' 
		literal '>/', '$/', '%/', '</', '@/', '<>/' 
		literal '>!', '$!', '%!', '<!', '@!', '<>!' 
		literal '>^', '$^', '%^', '<^', '@^', '<>^' 
		literal '<>'

		literal 'machine', 'action', 'variable', 'alphtype',
				'access', 'write', 'getkey', 'export', 'import',
				'include', 'prepush', 'postpop'

		token string /
			'"' ( [^"\\] | '\\' any )* '"' |
			"'" ( [^'\\] | '\\' any )* "'"
		/

		token re_literal /
			'/' ( [^/\\] | '\\' any )* '/'
		/
		token _union /
			'[' ( [^\]\\] | '\\' any )* ']'
		/

		token word /[a-zA-Z_][a-zA-Z0-9_]*/
		token uint / number /
		token hex / hex_number /
	end 

	# Not ';'
	token inline_expr /[^;]+/

	def join
		[join ',' expression]
	|	[expression]

	def expression
		[term expression_op*]

	def expression_op
		['|' term]
	|	['&' term]
	|	['-' term]
	|	['--' term]

	def term [factor_label term_op_list_short]

	# This list is done manually to get shortest match.
	def term_op_list_short
		[]
	|	[term_op term_op_list_short]

	def term_op
		[factor_label]
	|	['.' factor_label]
	|	[':>' factor_label]
	|	[':>>' factor_label]
	|	['<:' factor_label]

	def factor_label
		[word ':' factor_label]
	|	[factor_ep]

	def factor_ep
		[factor_aug]
	|	[factor_aug '->' word]

	def aug_base
		['@'] |	['>'] |	['%'] | ['$']

	def aug_op
		['@'] |	['>'] |	['%'] | ['$']
	|	['>' 'from']
	|	['>' 'to']

	def action_block
		['{' c_inline::item* '}']

	def action_ref 
		[word]
	|	['(' word ')']
	|	[action_block]
	
	def priority_aug
		[uint]
	|	['+' uint]
	|	['-' uint]

	def aug_cond
		['>?'] | ['$?'] | ['%?']
	|	['>' 'when'] | ['$' 'when'] | ['%' 'when']
	|	['when'] | ['inwhen'] | ['outwhen']

	def aug_to_state
		['>~'] | ['<~'] | ['$~'] | ['%~'] | ['@~']
	|	['>' 'to'] | ['<' 'to'] | ['$' 'to'] | ['%' 'to'] | ['@' 'to']
	|	['<>~'] | ['<>' 'to']

	def aug_from_state
		['>*'] | ['<*'] | ['$*'] | ['%*'] | ['@*']
	|	['>' 'from'] | ['<' 'from'] | ['$' 'from'] | ['%' 'from'] | ['@' 'from']
	|	['<>*'] | ['<>' 'from']

	def aug_eof
		['>/'] | ['</'] | ['$/'] | ['%/'] | ['@/']
	|	['>' 'eof'] | ['<' 'eof'] | ['$' 'eof'] | ['%' 'eof'] | ['@' 'eof']
	|	['<>/'] | ['<>' 'eof']

	def aug_gbl_error
		['>!'] | ['<!'] | ['$!'] | ['%!'] | ['@!']
	|	['>' 'err'] | ['<' 'err'] | ['$' 'err'] | ['%' 'err'] | ['@' 'err']
	|	['<>!'] | ['<>' 'err']

	def aug_local_error
		['>^'] | ['<^'] | ['$^'] | ['%^'] | ['@^']
	|	['>' 'lerr'] | ['<' 'lerr'] | ['$' 'lerr'] | ['%' 'lerr'] | ['@' 'lerr']
	|	['<>^'] | ['<>' 'lerr']

	def factor_aug
		[factor_aug aug_base action_ref]
	|	[factor_aug aug_base priority_aug]
	|	[factor_aug aug_base '(' word ',' priority_aug ')']
	|	[factor_aug aug_cond action_ref]
	|	[factor_aug aug_cond '!' action_ref]
	|	[factor_aug aug_to_state action_ref]
	|	[factor_aug aug_from_state action_ref]
	|	[factor_aug aug_eof action_ref]
	|	[factor_aug aug_gbl_error action_ref]
	|	[factor_aug aug_local_error action_ref]
	|	[factor_aug aug_local_error '(' word ',' action_ref ')']
	|	[factor_rep]

	def factor_rep 
		[factor_neg factor_rep_op*]

	def factor_rep_op
		['*']
	|	['**']
	|	['?']
	|	['+']
	|	['{' factor_rep_num '}']
	|	['{' ',' factor_rep_num '}']
	|	['{' factor_rep_num ',' '}']
	|	['{' factor_rep_num ',' factor_rep_num '}']

	def factor_rep_num
		[uint]

	def factor_neg 
		['!' factor_neg]
	|	['^' factor_neg]
	|	[factor]

	def factor 
		[AN: alphabet_num]
	|	[W: word]
	|	[S: string]
	|	[U: _union]
	|	[RL1: range_lit '..' RL2: range_lit]
	|	[re_literal]
	|	['(' J: join ')']

	def range_lit
		[string]
	|	[alphabet_num]

	def alphabet_num 
		[uint]
	|	['-' uint]
	|	[hex]

	def lm_act
		['=>' action_ref]
	|	[action_block]

	def lm_stmt
		[join lm_act? ';'] commit
	|	[assignment]
	|	[action_spec]

	def lm
		[join]
	|	['|*' lm_stmt+ '*|']

	def action_spec
		['action' word action_block] commit

	def assignment
		[word '=' join ';'] commit

	def instantiation
		[word ':=' lm ';'] commit

	def statement
		['machine' word ';'] commit
	|	[assignment]
	|	[instantiation]
	|	[action_spec]
	|	['prepush' action_block] commit
	|	['postpop' action_block] commit
	|	['variable' inline_expr ';'] commit
	|	['alphtype' inline_expr ';'] commit
	|	['access' inline_expr ';'] commit
	|	['write' inline_expr ';'] commit
	|	['getkey' inline_expr ';'] commit
	|	['import' inline_expr ';'] commit
	|	['export' inline_expr ';'] commit
	|	['include' inline_expr ';'] commit


	def ragel_start 
		[statement*]
end

namespace c_host
	lex 
		literal '%%', '%%{', '}%%'

		rl NL / '\n' /

		rl ruby_comment / '#' [^\n]* NL /

		rl s_literal
			/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		rl host_re_literal
			/ '/' ([^/\\] | NL | '\\' (any | NL))* '/' /

		token ident /ident/
		token number /digit+/
		token hex_number /'0x' [0-9a-fA-F]+/

		token comment
			/c_comment | cpp_comment/

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		token c_any / any /
	end

	def tok
		[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	[c_any]

	def section
		['%%' ragel::inline_expr ragel::';']
	|	['%%{' ragel::ragel_start '}%%']
	|	[tok]
end

