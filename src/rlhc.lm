namespace host
	lex 
		rl NL / '\n' /

		rl s_literal
			/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		rl c_comment 
			/ '/*' ( any | NL )* :>> '*/' /

		rl cpp_comment
			/ '//' [^\n]* NL /

		token ident
			/( alpha | '_' ) ( alpha | digit | '_' )*/

		token number
			/ digit+ /

		token hex_number
			/ '0x' [0-9a-fA-F]+ /

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		token pound_host /'#host'/
		token pound_gen /'#gen'/

		literal '}$'

		token c_any / any /
	end

	def host
		[pound_host whitespace number whitespace string]

	def gen
		[pound_gen whitespace number whitespace string]

	def tok
		[host]
	|	[gen]
	|	[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	[c_any]

	def out
		[tok*]
	
	tok* concat( H: tok* T: tok* )
	{
		for L: tok* in H {
			if match L [] {
				L = T
				break
			}
		}
		return H
	}
end

namespace gen
	lex 
		rl NL / '\n' /

		rl s_literal
			/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		rl c_comment 
			/ '/*' ( any | NL )* :>> '*/' /

		rl cpp_comment
			/ '//' [^\n]* NL /

		token ident
			/( alpha | '_' ) ( alpha | digit | '_' )*/

		token number
			/ digit+ /

		token hex_number
			/ '0x' [0-9a-fA-F]+ /

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		ignore / ( [ \t] | NL )+ /

		token pound_host /'#host'/
		token pound_gen /'#gen'/

		literal '$', '{', '}'

		token c_any / any /
	end

	def ehost
		['$' string number '{' host::tok* host::'}$']

	def tok
		[ehost]
	|	[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	['{']
	|	['}']
	|	[c_any]

	def start
		[tok*]

	host::out trans( Output: stream Start: ref<start> )
	{
		cons OutList: host::tok* []
		for Tok: tok in Start {
			if match Tok
				['$' string number '{' TL: host::tok* host::'}$']
			{
				prints( Output TL )
			}
			else
			{
				prints( Output Tok )
			}
		}
	}
end

InputFile: str = argv.pop()
OutputFile: str = argv.pop()

Input: stream = open( InputFile "r" )

parse Start: gen::start[ Input ]

if ( !Start ) {
	print( error '\n' )
	exit(1)
}

Output: stream = open( OutputFile "w" )

trans( Output Start )
