namespace host
	lex 
		rl NL / '\n' /

		rl s_literal
			/ "'" ([^'\\] | NL | '\\' (any | NL))* "'" /

		rl d_literal
			/ '"' ([^"\\] | NL | '\\' (any | NL))* '"' /

		rl c_comment 
			/ '/*' ( any | NL )* :>> '*/' /

		rl cpp_comment
			/ '//' [^\n]* NL /

		token ident
			/( alpha | '_' ) ( alpha | digit | '_' )*/

		token number
			/ digit+ /

		token hex_number
			/ '0x' [0-9a-fA-F]+ /

		token comment
			/ c_comment | cpp_comment /

		token string
			/ s_literal | d_literal /

		token whitespace
			/ ( [ \t] | NL )+ /

		token pound_host /'#host'/
		token pound_gen /'#gen'/

		literal '${', '}$'

		token c_any / any /
	end

	def host
		[pound_host whitespace number whitespace string]

	def gen
		[pound_gen whitespace number whitespace string]

	def host_tok
		[host]
	|	[gen]
	|	[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	[c_any]

	def ehost
		['${' host_tok* '}$']

	def tok
		[host]
	|	[gen]
	|	[ident]
	|	[number]
	|	[hex_number]
	|	[comment]
	|	[string]
	|	[whitespace]
	|	[c_any]
	|	[ehost]

	def start
		[tok*]

	int trans( Start: ref<start> )
	{
		for Tok: tok in Start
		{
			if match Tok
				[L: '${' Rep: host_tok* R: '}$']
			{
				L.data = ''
				R.data = ''
				Tok = cons tok [L Rep R]
			}
		}
	}
end

InputFile: str = argv.pop()
OutputFile: str = argv.pop()

Input: stream = open( InputFile "r" )

parse Start: host::start[ Input ]

if ( !Start ) {
	print( error '\n' )
	exit(1)
}

trans( Start )

Output: stream = open( OutputFile "w" )
prints( Output Start )
