int go_tok_list( Output: stream TL: host::tok* )
{
	for Tok: host::tok in repeat(TL) {
		if match Tok [host::'${' StmtList: stmt* host::'}$']
			go_trans_stmt_list( Output StmtList )
		elsif match Tok [host::'={' Expr: expr host::'}$']
			go_trans_expr( Output Expr )
		else {
			send Output [Tok]
		}
	}
}

int go_trans_expr_factor( Output: stream ExprFactor: expr_factor )
{
	if match ExprFactor
		['$' string uint '{' TL: host::tok* host::'}$']
	{
		go_tok_list( Output TL )
	}
	elsif match ExprFactor
		[O:'(' TL: expr C: ')']
	{
		send Output [O]
		go_trans_expr( Output TL )
		send Output [C]
	}
	elsif match ExprFactor
		[ident O: '[' TL: expr C: ']']
	{
		send Output [ExprFactor.ident O]
		go_trans_expr( Output TL )
		send Output [C]
	}
	elsif match ExprFactor
		['offset' '(' ident ',' expr ')']
	{
		send Output [ExprFactor.ident ' + ']
		go_trans_expr( Output ExprFactor.expr )
	}
	elsif match ExprFactor
			[T: 'TRUE']
	{
		T.data = 'true'
		send Output [T]
	}
	elsif match ExprFactor
			[F: 'FALSE']
	{
		F.data = '0'
		send Output [F]
	}
	elsif match ExprFactor
			[N: 'nil']
	{
		N.data = '0'
		send Output [N]
	}
	else {
		# Catches cases not specified
		send Output [ExprFactor]
	}
}

int go_trans_expr_ptr( Output: stream ExprPtr: expr_ptr )
{
	if match ExprPtr [expr_ptr Arrow: '->' expr_factor]
	{
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
		send Output [Arrow]
		go_trans_expr_factor( Output ExprPtr.expr_factor )
	}
	elsif match ExprPtr [Star: '*' expr_ptr]
	{
		send Output [Star]
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [PP: '++' expr_ptr]
	{
		send Output [PP]
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [MM: '--' expr_ptr]
	{
		send Output [MM]
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [expr_ptr PP: '++']
	{
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
		send Output [PP]
	}
	elsif match ExprPtr [expr_ptr MM: '--']
	{
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
		send Output [MM]
	}
	elsif match ExprPtr ['(' Type: type ')' expr_ptr]
	{
		go_type( Output Type )
		send Output ['(']
		go_trans_expr_ptr( Output ExprPtr._expr_ptr )
		send Output [')']
	}
	elsif match ExprPtr [expr_factor]
	{
		go_trans_expr_factor( Output ExprPtr.expr_factor )
	}
	else {
		send Output [ExprPtr]
	}
}

int go_trans_expr_factor_op( Output: stream ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: '!' expr_factor_op]
	{
		send Output [B]
		go_trans_expr_factor_op( Output ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: '~' expr_factor_op]
	{
		send Output ['^']
		go_trans_expr_factor_op( Output ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_ptr]
	{
		go_trans_expr_ptr( Output ExprFactorOp.expr_ptr )
	}
}

int go_trans_expr_bitwise( Output: stream ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: '&' expr_factor_op]
	{
		go_trans_expr_bitwise( Output ExprBitwise._expr_bitwise )
		send Output [A]
		go_trans_expr_factor_op( Output ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		go_trans_expr_factor_op( Output ExprBitwise.expr_factor_op )
	}
}

int go_trans_expr_mult( Output: stream ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: '*' expr_bitwise]
	{
		go_trans_expr_mult( Output ExprMult._expr_mult )
		send Output [T]
		go_trans_expr_bitwise( Output ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		go_trans_expr_bitwise( Output ExprMult.expr_bitwise )
	}
}

int go_trans_expr_add( Output: stream ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Op: add_op expr_mult]
	{
		go_trans_expr_add( Output ExprAdd._expr_add )
		send Output [Op]
		go_trans_expr_mult( Output ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		go_trans_expr_mult( Output ExprAdd.expr_mult )
	}
}

int go_trans_expr_shift( Output: stream ExprShift: expr_shift )
{
	if match ExprShift [expr_shift Op: shift_op expr_add]
	{
		go_trans_expr_shift( Output ExprShift._expr_shift )
		send Output [Op]
		go_trans_expr_add( Output ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		go_trans_expr_add( Output ExprShift.expr_add )
	}
}

int go_trans_expr_test( Output: stream ExprTest: expr_test )
{
	if match ExprTest [expr_test Op: test_op expr_shift]
	{
		go_trans_expr_test( Output ExprTest._expr_test )
		send Output [Op]
		go_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		go_trans_expr_shift( Output ExprTest.expr_shift )
	}
}

int go_trans_expr_cond( Output: stream ExprCond: expr_cond )
{
	if match ExprCond [expr_test Q: '?' expr C: ':' expr_cond]
	{
		go_trans_expr_test( Output ExprCond.expr_test )
		send Output [Q]
		go_trans_expr( Output ExprCond.expr )
		send Output [C]
		go_trans_expr_cond( Output ExprCond._expr_cond )
	}
	elsif match ExprCond [expr_test]
	{
		go_trans_expr_test( Output ExprCond.expr_test )
	}
}

int go_trans_expr_assign( Output: stream ExprAssign: expr_assign )
{
	if match ExprAssign [expr_assign Op: assign_op expr_cond]
	{
		go_trans_expr_assign( Output ExprAssign._expr_assign )
		send Output [Op]
		go_trans_expr_cond( Output ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_cond]
	{
		go_trans_expr_cond( Output ExprAssign.expr_cond )
	}
}

int go_trans_expr( Output: stream Expr: expr )
{
	go_trans_expr_assign( Output Expr.expr_assign )
}

int go_type( Output: stream Type: type )
{
	if match Type "s8"
		send Output ['int8 ']
	elsif match Type "s16"
		send Output ['int16 ']
	elsif match Type "s32"
		send Output ['int32 ']
	elsif match Type "s64"
		send Output ['int64 ']
	elsif match Type "s128"
		send Output ['long long ']
	elsif match Type "unsigned int"
		send Output ['uint ']
	else
		send Output [Type]
}

int go_num( Output: stream Number: number )
{
	if match Number [sint 'u']
		send Output [Number.uint.sint]
	else
		send Output [Number]
}

int go_num_list( Output: stream NumList: num_list )
{
	go_num( Output NumList.number )
	for CommaNum: comma_num in NumList {
		send Output [', ']
		go_num( Output CommaNum.number )
	}
}

int go_trans_stmt( Output: stream Stmt: stmt )
{
	if match Stmt
		['$' string uint '{' TL: host::tok* host::'}$']
	{
		go_tok_list( Output TL )
	}
	elsif match Stmt [Array: array] {
		send Output ['var ' Array.ident ' []']
		go_type( Output Array.type )
		send Output [' = []']
		go_type( Output Array.type )
		send Output [' { ']
		go_num_list( Output Array.num_list )
		send Output [' }\n']
	}
	elsif match Stmt [Value: value] {
		send Output ['var ' Value.value_pass.ident ' ']
		go_type( Output Value.value_pass.type )
		send Output ['= ' Value.value_pass.number '\n']
	}
	elsif match Stmt [
			'if' O: '(' IfExpr: expr C: ')' IfStmt: stmt
	] {
		# if-statements with only the if clause can go out as an if.
		send Output ['if ' ]
		go_trans_expr( Output IfExpr )
		send Output ['{\n']
		go_trans_stmt( Output IfStmt )
		send Output ['}\n']
	}
	elsif match Stmt [
			'if' O: '(' IfExpr: expr C: ')' IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		# If the if-statement has more than just an if clause it goes out as a switch.
		send Output ['switch {\n ' ]

		send Output ['case ' ]
		go_trans_expr( Output IfExpr )
		send Output [':\n']
		go_trans_stmt( Output IfStmt )

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else' 'if' '(' ElseIfExpr: expr ')' ElseIfStmt: stmt]

			send Output ['case ']
			go_trans_expr( Output ElseIfExpr )
			send Output [':\n']
			go_trans_stmt( Output ElseIfStmt )
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			send Output ['default:\n']
			go_trans_stmt( Output ElseStmt )
		}
		send Output ['}']
	}
	elsif match Stmt ["while ( TRUE )" WhileStmt: stmt] {
		send Output ['for ']
		send Output ['{\n']
		go_trans_stmt( Output WhileStmt )
		send Output ['}\n']
	}
	elsif match Stmt ['while' '(' WhileExpr: expr ')' WhileStmt: stmt] {
		send Output ['for ']
		go_trans_expr( Output WhileExpr )
		send Output ['{\n']
		go_trans_stmt( Output WhileStmt )
		send Output ['}\n']
	}
	elsif match Stmt ['switch' '(' SwitchExpr: expr ')' '{' StmtList: stmt* '}'] {
		send Output ['switch ']
		go_trans_expr( Output SwitchExpr )
		send Output ['{\n']
		go_trans_stmt_list( Output StmtList )
		send Output ['}\n']
	}
	elsif match Stmt [ExprExpr: expr Semi: ';'] {
		go_trans_expr( Output ExprExpr )
		send Output [Semi]
	}
	elsif match Stmt [L: '{' TL: stmt* R: '}'] {
		send Output [L]
		go_trans_stmt_list( Output TL )
		send Output [R]
	}
	elsif match Stmt [OptConst: opt_const Type: type OptPtr: opt_ptr Ident: ident OptInit: opt_init Semi: ';']
	{
		send Output ['var ' Ident ' ']
		go_type( Output Type )
		if match OptInit [E: '=' expr] {
			send Output [' ' E]
			go_trans_expr( Output OptInit.expr )
		}
		send Output ['\n']
	}
	elsif match Stmt [export_stmt]
	{
		send Output ['#define ' Stmt.export_stmt.ident Stmt.export_stmt.number '\n' ]
	}
	elsif match Stmt ['fallthrough' ';']
	{
		# Nothing needed here.
	}
	elsif match Stmt [index_stmt]
	{
		send Output ['var ' Stmt.index_stmt.ident ' ']
		go_type( Output Stmt.index_stmt.type )
		send Output ['\n']
	}
	else {
		# catches unspecified cases
		send Output [Stmt]
	}
}

int go_trans_stmt_list( Output: stream StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		go_trans_stmt( Output Stmt )
}
