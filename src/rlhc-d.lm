int d_trans_expr_factor( Output: stream ExprFactor: expr_factor )
{
	if match ExprFactor
		['$' string uint '{' TL: host::tok* host::'}$']
	{
		prints( Output TL )
	}
	elsif match ExprFactor
		[O:'(' TL: expr C: ')']
	{
		prints( Output O )
		d_trans_expr( Output TL )
		prints( Output C )
	}
	elsif match ExprFactor
		[ident O: '[' TL: expr C: ']']
	{
		prints( Output ExprFactor.ident )
		prints( Output O )
		d_trans_expr( Output TL )
		prints( Output C )
	}
	elsif match ExprFactor
		['offset' '(' ident ',' expr ')']
	{
		prints( Output '&' ExprFactor.ident '[' )
		c_trans_expr( Output ExprFactor.expr )
		prints( Output ']' )
	}
	elsif match ExprFactor
			[T: 'TRUE']
	{
		T.data = '1'
		prints( Output T )
	}
	elsif match ExprFactor
			[F: 'FALSE']
	{
		F.data = '0'
		prints( Output F )
	}
	else {
		# Catches cases not specified
		prints( Output ExprFactor )
	}
}

int d_trans_expr_ptr( Output: stream ExprPtr: expr_ptr )
{
	if match ExprPtr [expr_ptr Arrow: '->' expr_factor]
	{
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
		prints( Output Arrow )
		d_trans_expr_factor( Output ExprPtr.expr_factor )
	}
	elsif match ExprPtr [Star: '*' expr_ptr]
	{
		prints( Output Star )
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [PP: '++' expr_ptr]
	{
		prints( Output PP )
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [MM: '--' expr_ptr]
	{
		prints( Output MM )
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [expr_ptr PP: '++']
	{
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
		prints( Output PP )
	}
	elsif match ExprPtr [expr_ptr MM: '--']
	{
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
		prints( Output MM )
	}
	elsif match ExprPtr [Open: '(' Type: type Close: ')' expr_ptr]
	{
		prints( Output 'cast' Open )
		d_type( Output Type )
		prints( Output Close )
		d_trans_expr_ptr( Output ExprPtr._expr_ptr )
	}
	elsif match ExprPtr [expr_factor]
	{
		d_trans_expr_factor( Output ExprPtr.expr_factor )
	}
	else {
		prints( Output ExprPtr )
	}
}

int d_trans_expr_factor_op( Output: stream ExprFactorOp: expr_factor_op )
{
	if match ExprFactorOp [B: '!' expr_factor_op]
	{
		prints( Output B )
		d_trans_expr_factor_op( Output ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [T: '~' expr_factor_op]
	{
		prints( Output T )
		d_trans_expr_factor_op( Output ExprFactorOp._expr_factor_op )
	}
	elsif match ExprFactorOp [expr_ptr]
	{
		d_trans_expr_ptr( Output ExprFactorOp.expr_ptr )
	}
}

int d_trans_expr_bitwise( Output: stream ExprBitwise: expr_bitwise )
{
	if match ExprBitwise [expr_bitwise A: '&' expr_factor_op]
	{
		d_trans_expr_bitwise( Output ExprBitwise._expr_bitwise )
		prints( Output A )
		d_trans_expr_factor_op( Output ExprBitwise.expr_factor_op )
	}
	elsif match ExprBitwise [expr_factor_op]
	{
		d_trans_expr_factor_op( Output ExprBitwise.expr_factor_op )
	}
}

int d_trans_expr_mult( Output: stream ExprMult: expr_mult )
{
	if match ExprMult [expr_mult T: '*' expr_bitwise]
	{
		d_trans_expr_mult( Output ExprMult._expr_mult )
		prints( Output T )
		d_trans_expr_bitwise( Output ExprMult.expr_bitwise )
	}
	elsif match ExprMult [expr_bitwise]
	{
		d_trans_expr_bitwise( Output ExprMult.expr_bitwise )
	}
}

int d_trans_expr_add( Output: stream ExprAdd: expr_add )
{
	if match ExprAdd [expr_add Plus: '+' expr_mult]
	{
		d_trans_expr_add( Output ExprAdd._expr_add )
		prints( Output Plus )
		d_trans_expr_mult( Output ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_add Minus: '-' expr_mult]
	{
		d_trans_expr_add( Output ExprAdd._expr_add )
		prints( Output Minus )
		d_trans_expr_mult( Output ExprAdd.expr_mult )
	}
	elsif match ExprAdd [expr_mult]
	{
		d_trans_expr_mult( Output ExprAdd.expr_mult )
	}
}

int d_trans_expr_shift( Output: stream ExprShift: expr_shift )
{
	if match ExprShift [expr_shift LL: '<<' expr_add]
	{
		d_trans_expr_shift( Output ExprShift._expr_shift )
		prints( Output LL )
		d_trans_expr_add( Output ExprShift.expr_add )
	}
	elsif match ExprShift [expr_shift RR: '>>' expr_add]
	{
		d_trans_expr_shift( Output ExprShift._expr_shift )
		prints( Output RR )
		d_trans_expr_add( Output ExprShift.expr_add )
	}
	elsif match ExprShift [expr_add]
	{
		d_trans_expr_add( Output ExprShift.expr_add )
	}
}

int d_trans_expr_test( Output: stream ExprTest: expr_test )
{
	if match ExprTest [expr_test LT: '<' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output LT )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test GT: '>' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output GT )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test LTE: '<=' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output LTE )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test GTE: '>=' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output GTE )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test EQ: '==' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output EQ )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test NE: '!=' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output NE )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test AND: '&&' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output AND )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_test OR: '||' expr_shift]
	{
		d_trans_expr_test( Output ExprTest._expr_test )
		prints( Output OR )
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
	elsif match ExprTest [expr_shift]
	{
		d_trans_expr_shift( Output ExprTest.expr_shift )
	}
}

int d_trans_expr_cond( Output: stream ExprCond: expr_cond )
{
	if match ExprCond [expr_test Q: '?' expr C: ':' expr_cond]
	{
		d_trans_expr_test( Output ExprCond.expr_test )
		prints( Output Q )
		d_trans_expr( Output ExprCond.expr )
		prints( Output C )
		d_trans_expr_cond( Output ExprCond._expr_cond )
	}
	elsif match ExprCond [expr_test]
	{
		d_trans_expr_test( Output ExprCond.expr_test )
	}
}

int d_trans_expr_assign( Output: stream ExprAssign: expr_assign )
{
	if match ExprAssign [expr_assign E: '=' expr_cond]
	{
		d_trans_expr_assign( Output ExprAssign._expr_assign )
		prints( Output E )
		d_trans_expr_cond( Output ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_assign PE: '+=' expr_cond]
	{
		d_trans_expr_assign( Output ExprAssign._expr_assign )
		prints( Output PE )
		d_trans_expr_cond( Output ExprAssign.expr_cond )
	}
	elsif match ExprAssign [expr_cond]
	{
		d_trans_expr_cond( Output ExprAssign.expr_cond )
	}
}

int d_trans_expr( Output: stream Expr: expr )
{
	d_trans_expr_assign( Output Expr.expr_assign )
}

int d_type( Output: stream Type: type )
{
	if match Type "s8"
		prints( Output 'byte ' )
	elsif match Type "s16"
		prints( Output 'short ' )
	elsif match Type "s32"
		prints( Output 'int ' )
	elsif match Type "s64"
		prints( Output 'long ' )
	elsif match Type "s128"
		prints( Output 'long long ' )
	elsif match Type "unsigned int"
		prints( Output 'uint ' )
	else
		prints( Output Type )
}

int d_trans_stmt( Output: stream Stmt: stmt )
{
	if match Stmt
		['$' string uint '{' TL: host::tok* host::'}$']
	{
		prints( Output TL )
	}
	elsif match Stmt [Array: array] {
		prints( Output 'static const ' )
		d_type( Output Array.type )
		prints( Output Array.ident '[] = [ ' Array.num_list ' ];\n' )
	}
	elsif match Stmt [Value: value] {
		prints( Output 'static const ' Value.value_pass )
	}
	elsif match Stmt [
			'if' O: '(' IfExpr: expr C: ')' IfStmt: stmt
			ElseIfClauseList: else_if_clause* ElseClauseOpt: else_clause?
	] {
		prints( Output 'if ' O )
		d_trans_expr( Output IfExpr )
		prints( Output C )

		d_trans_stmt( Output IfStmt )

		for ElseIfClause: else_if_clause in repeat( ElseIfClauseList ) {
			match ElseIfClause
				['else' 'if' O2: '(' ElseIfExpr: expr C2: ')' ElseIfStmt: stmt]

			prints( Output 'else if ' O2 )
			d_trans_expr( Output ElseIfExpr )
			prints( Output C2 )

			d_trans_stmt( Output ElseIfStmt )
		}

		if ( match ElseClauseOpt ['else' ElseStmt: stmt] ) {
			prints( Output 'else ' )
			d_trans_stmt( Output ElseStmt )
		}
	}
	elsif match Stmt ['while' O: '(' WhileExpr: expr C: ')' WhileStmt: stmt] {
		prints( Output 'while ' O )
		d_trans_expr( Output WhileExpr )
		prints( Output C )
		d_trans_stmt( Output WhileStmt )
	}
	elsif match Stmt ['switch' O: '(' SwitchExpr: expr C: ')' '{' StmtList: stmt* '}'] {
		prints( Output 'switch ' O )
		d_trans_expr( Output SwitchExpr )
		prints( Output C '{' )
		d_trans_stmt_list( Output StmtList )
		prints( Output 'default: break; }' )
	}
	elsif match Stmt [ExprExpr: expr Semi: ';'] {
		d_trans_expr( Output ExprExpr )
		prints( Output Semi )
	}
	elsif match Stmt [L: '{' TL: stmt* R: '}'] {
		prints( Output L )
		d_trans_stmt_list( Output TL )
		prints( Output R )
	}
	elsif match Stmt [OptConst: opt_const Type: type OptPtr: opt_ptr Ident: ident OptInit: opt_init Semi: ';']
	{
		if match OptConst ['const']
		{
			prints( Output 'const(' )
			d_type( Output Type )
			prints( Output ')' )
		}
		else
			d_type( Output Type )
		prints( Output OptPtr Ident  )
		if match OptInit [E: '=' expr] {
			prints( Output E )
			d_trans_expr( Output OptInit.expr )
		}
		prints( Output Semi )
	}
	elsif match Stmt [case_label]
	{
		prints( Output 'goto case; ' Stmt.case_label )
	}
	else {
		# catches unspecified cases
		prints( Output Stmt )
	}
}

int d_trans_stmt_list( Output: stream StmtList: stmt* )
{
	for Stmt: stmt in repeat( StmtList )
		d_trans_stmt( Output Stmt )
}


