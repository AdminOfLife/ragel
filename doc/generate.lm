

Header: str =
	~%
	~%   Copyright 2001-2009 Adrian Thurston <thurston@complang.org>
	~%
	~
	~%   This file is part of Ragel.
	~%
	~%   Ragel is free software; you can redistribute it and/or modify
	~%   it under the terms of the GNU General Public License as published by
	~%   the Free Software Foundation; either version 2 of the License, or
	~%   (at your option) any later version.
	~%
	~%   Ragel is distributed in the hope that it will be useful,
	~%   but WITHOUT ANY WARRANTY; without even the implied warranty of
	~%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	~%   GNU General Public License for more details.
	~%
	~%   You should have received a copy of the GNU General Public License
	~%   along with Ragel; if not, write to the Free Software
	~%   Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA 
	~
	~% TODO: Need a section on the different strategies for handline recursion.
	~
	~\documentclass[letterpaper,11pt,oneside]{book}
	~\usepackage{graphicx}
	~\usepackage{comment}
	~\usepackage{multicol}
	~\usepackage[
	~	colorlinks=true,
	~	linkcolor=black,
	~	citecolor=green,
	~	filecolor=black,
	~	urlcolor=black]{hyperref}
	~
	~\topmargin -0.20in
	~\oddsidemargin 0in
	~\textwidth 6.5in
	~\textheight 9in
	~
	~\setlength{\parskip}{0pt}
	~\setlength{\topsep}{0pt}
	~\setlength{\partopsep}{0pt}
	~\setlength{\itemsep}{0pt}
	~
	~\input{version}
	~
	~\newcommand{\verbspace}{\vspace{10pt}}
	~\newcommand{\graphspace}{\vspace{10pt}}
	~
	~\renewcommand\floatpagefraction{.99}
	~\renewcommand\topfraction{.99}
	~\renewcommand\bottomfraction{.99}
	~\renewcommand\textfraction{.01}   
	~\setcounter{totalnumber}{50}
	~\setcounter{topnumber}{50}
	~\setcounter{bottomnumber}{50}
	~
	~\newenvironment{inline_code}{\def\baselinestretch{1}\vspace{12pt}\small}{}
	~
	~\begin{document}
	~
	~%
	~% Title page
	~%
	~\thispagestyle{empty}
	~\begin{center}
	~\vspace*{3in}
	~{\huge Ragel State Machine Compiler}\\
	~\vspace*{12pt}
	~{\Large User Guide}\\
	~\vspace{1in}
	~by\\
	~\vspace{12pt}
	~{\large Adrian Thurston}\\
	~\end{center}
	~\clearpage
	~
	~\pagenumbering{roman}
	~
	~%
	~% License page
	~%
	~\chapter*{License}
	~Ragel version \version, \pubdate\\
	~Copyright \copyright\ 2003-2007 Adrian Thurston
	~\vspace{6mm}
	~
	~{\bf\it\noindent This document is part of Ragel, and as such, this document is
	~released under the terms of the GNU General Public License as published by the
	~Free Software Foundation; either version 2 of the License, or (at your option)
	~any later version.}
	~
	~\vspace{5pt}
	~
	~{\bf\it\noindent Ragel is distributed in the hope that it will be useful, but
	~WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
	~FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
	~details.}
	~
	~\vspace{5pt}
	~
	~{\bf\it\noindent You should have received a copy of the GNU General Public
	~License along with Ragel; if not, write to the Free Software Foundation, Inc.,
	~59 Temple Place, Suite 330, Boston, MA  02111-1307  USA}
	~
	~%
	~% Table of contents
	~%
	~\clearpage
	~\tableofcontents
	~\clearpage
	~
	~%
	~% Chapter 1
	~%
	~
	~\pagenumbering{arabic}
	~

Footer: str =
	~
	~\end{document}

lex all 
{
	rl hws /[ \t]+/

	token PLAIN //

	token _ /hws? [^. \t\n]/ {
		input.push( make_token( typeid<PLAIN> '' ) )
	}
	
	token empty_line /hws? '\n'/

	token cmd_chapter /hws? '.' hws? 'chapter' hws/
	token cmd_section /hws? '.' hws? 'section' hws/
	token cmd_sub_section /hws? '.' hws? 'subsection' hws/
	token cmd_sub_sub_section /hws? '.' hws? 'subsubsection' hws/
	token cmd_graphic /hws? '.' hws? 'graphic' hws/
	token cmd_comment /hws? '.' hws? 'comment' hws? '\n'/
	token cmd_verbatim /hws? '.' hws? 'verbatim' hws? '\n'/
	token cmd_code /hws? '.' hws? 'code' hws? '\n'/
	token cmd_itemize /hws? '.' hws? 'itemize' hws? '\n'/
	token end_itemize /hws? '.' hws? 'end' hws 'itemize' hws? '\n'/
	token cmd_item /hws? '.' hws? 'item' hws/
}

lex line
{
	token d /[^@\n]+/
	literal '@@', '@'
	token nl /'\n'/
}

lex ilc
{
	token cmd_verb1 /'verb|'/
	token cmd_verb2 /'verb/'/
}

lex verb1
{
	token vdd1 /[^|]*/
	token vde1 /'|'/
}

lex verb2
{
	token vdd2 /[^/]*/
	token vde2 /'/'/
}

def pl_data
	['@']
|	['@@' cmd_verb1 vdd1 vde1]
|	['@@' cmd_verb2 vdd2 vde2]
|	[d]

def plain_line
	[PLAIN pl_data* nl]

lex dirdata
{
	token dirdata /[^\n]+/
	token dd_nl /'\n'/
}

lex word
{
	ignore /[ \t]+/
	token word /[^ \t\n]+/
	token dw_nl /'\n'/
}

lex verbatim
{
	token end_verbatim /hws? '.' hws? 'end' hws 'verbatim' hws? '\n'/
	token verbatim_line /[^\n]* '\n'/
}

lex code
{
	token end_code /hws? '.' hws? 'end' hws 'code' hws? '\n'/
	token code_line /[^\n]* '\n'/
}

lex comment
{
	token end_comment /hws? '.' hws? 'end' hws 'comment' hws? '\n'/
	token comment_line /[^\n]* '\n'/
}

def comment
	[cmd_comment comment_line* end_comment]

def verbatim
	[cmd_verbatim verbatim_line* end_verbatim]

def code
	[cmd_code line* end_code]

def line
	[empty_line]
|	[plain_line]
|	[comment]
|	[verbatim]
|	[code]
|	[graphic]
|	[itemize]

def sub_sub_section
	[cmd_sub_sub_section dirdata dd_nl line*]

def sub_section
	[cmd_sub_section dirdata dd_nl line* sub_sub_section*]

def section
	[cmd_section dirdata dd_nl line* sub_section*]

def chapter
	[cmd_chapter dirdata dd_nl line* section*]

# Name scale (optional)
def graphic
	[cmd_graphic word word? dw_nl]

def itemize
	[cmd_itemize line* item* end_itemize]

def item
	[cmd_item line*]

def start 
	[chapter*]

parse Start: start( stdin )
if ( ! Start ) {
	print( error() '\n' )
	exit( 1 )
}

print( Header )

int printLines( Lines: line* )
{
	for L: line in repeat(Lines) {
		if match L [empty_line] {
			print( L )
		}
		if match L [PLAIN D: pl_data* Nl: nl] {
			# FIXME: pretty ugly, but works for transitioning.
			for Pld: pl_data in D {
				if match Pld ['@@' cmd_verb1 V: vdd1 vde1] {
					print( '\\verb|' )
					print( V )
					print( '|' )
				}
				else if match Pld ['@@' cmd_verb2 V: vdd2 vde2] {
					print( '\\verb/' )
					print( V )
					print( '/' )
				}
				else {
					print( Pld )
				}
			}
			print( Nl )
		}
		if match L [cmd_verbatim Lines: verbatim_line* end_verbatim] {
			print( '\\begin{verbatim}\n' )
			print( Lines )
			print( '\\end{verbatim}\n' )
		}
		if match L [cmd_code Lines: line* end_code] {
			print( '\\begin{inline_code}\n' )
			printLines( Lines )
			print( '\\end{inline_code}\n' )
		}
		if match L [cmd_graphic Name: word Scale: word? dw_nl] {
			print( '\\graphspace\n' )
			print( '\\begin{center}\n' )
			print( '\\includegraphics' )
			if match Scale [word]
				print( '[scale=' Scale ']' )
			else 
				print( '[scale=0.55]' )
			print( '{' Name '}\n' )
			print( '\\end{center}\n' )
			print( '\\graphspace\n' )
		}
		if match L [cmd_itemize Lines: line* Items: item* end_itemize] {
			print( '\\begin{itemize}\n' )
			printLines( Lines )
			for Item: item in repeat(Items) {
				match Item [cmd_item Lines: line*]
				print( '\\item ' )
				printLines( Lines )
			}
			print( '\\end{itemize}\n' )
		}
	}
}

for Chapter: chapter in Start {
	match Chapter
		[cmd_chapter DirData: dirdata dd_nl Lines: line* SectionList: section*]

	print( '\\chapter{' DirData '}\n' )
	printLines( Lines )

	for Section: section in repeat(SectionList) {
		match Section
			[cmd_section DirData: dirdata dd_nl Lines: line* SubSectionList: sub_section*]

		print( '\\section{' DirData '}\n' )
		printLines( Lines )
		for SubSection: sub_section in repeat(SubSectionList) {
			match SubSection
				[cmd_sub_section DirData: dirdata dd_nl Lines: line* SubSubSectionList: sub_sub_section*]

			print( '\\subsection{' DirData '}\n' )
			printLines( Lines )

			for SubSubSection: sub_sub_section in repeat(SubSubSectionList) {
				match SubSubSection
					[cmd_sub_sub_section DirData: dirdata dd_nl Lines: line*]

				print( '\\subsubsection{' DirData '}\n' )
				printLines( Lines )
			}
		}
	}
}

print( Footer )
